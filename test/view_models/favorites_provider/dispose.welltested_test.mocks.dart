// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_ebook_app/test/view_models/favorites_provider/dispose.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:flutter_ebook_app/database/favorite_helper.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFuture_0<T> extends _i1.SmartFake implements _i2.Future<T> {
  _FakeFuture_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FavoriteDB].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoriteDB extends _i1.Mock implements _i3.FavoriteDB {
  MockFavoriteDB() {
    _i1.throwOnMissingStub(this);
  }

  @override
  dynamic add(Map<dynamic, dynamic>? item) =>
      super.noSuchMethod(Invocation.method(
        #add,
        [item],
      ));
  @override
  _i2.Future<int> remove(Map<dynamic, dynamic>? item) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [item],
        ),
        returnValue: _i2.Future<int>.value(0),
      ) as _i2.Future<int>);
  @override
  _i2.Future<List<dynamic>> listAll() => (super.noSuchMethod(
        Invocation.method(
          #listAll,
          [],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
  @override
  _i2.Future<_i2.Stream<List<dynamic>>> listAllStream() => (super.noSuchMethod(
        Invocation.method(
          #listAllStream,
          [],
        ),
        returnValue: _i2.Future<_i2.Stream<List<dynamic>>>.value(
            _i2.Stream<List<dynamic>>.empty()),
      ) as _i2.Future<_i2.Stream<List<dynamic>>>);
  @override
  _i2.Future<List<dynamic>> check(Map<dynamic, dynamic>? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #check,
          [item],
        ),
        returnValue: _i2.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i2.Future<List<dynamic>>);
}

/// A class which mocks [StreamSubscription].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamSubscription<T> extends _i1.Mock
    implements _i2.StreamSubscription<T> {
  MockStreamSubscription() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused => (super.noSuchMethod(
        Invocation.getter(#isPaused),
        returnValue: false,
      ) as bool);
  @override
  _i2.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
  @override
  void onData(void Function(T)? handleData) => super.noSuchMethod(
        Invocation.method(
          #onData,
          [handleData],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(Function? handleError) => super.noSuchMethod(
        Invocation.method(
          #onError,
          [handleError],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onDone(void Function()? handleDone) => super.noSuchMethod(
        Invocation.method(
          #onDone,
          [handleDone],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void pause([_i2.Future<void>? resumeSignal]) => super.noSuchMethod(
        Invocation.method(
          #pause,
          [resumeSignal],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resume() => super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.Future<E> asFuture<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #asFuture,
          [futureValue],
        ),
        returnValue: _FakeFuture_0<E>(
          this,
          Invocation.method(
            #asFuture,
            [futureValue],
          ),
        ),
      ) as _i2.Future<E>);
}
